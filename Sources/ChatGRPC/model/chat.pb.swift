// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: chat.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
import CoreGRPC

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum ChatFolder: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Значение для обычного приложения
  case none // = 0
  case `open` // = 1
  case inProgress // = 2
  case done // = 3
  case cancelled // = 4
  case archive // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .open
    case 2: self = .inProgress
    case 3: self = .done
    case 4: self = .cancelled
    case 5: self = .archive
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .open: return 1
    case .inProgress: return 2
    case .done: return 3
    case .cancelled: return 4
    case .archive: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ChatFolder: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ChatFolder] = [
    .none,
    .open,
    .inProgress,
    .done,
    .cancelled,
    .archive,
  ]
}

#endif  // swift(>=4.2)

public struct ChatPagination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Получить чаты с датой последнего изменения до time_before
  public var timeBefore: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timeBefore ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timeBefore = newValue}
  }
  /// Returns true if `timeBefore` has been explicitly set.
  public var hasTimeBefore: Bool {return self._timeBefore != nil}
  /// Clears the value of `timeBefore`. Subsequent reads from it will return its default value.
  public mutating func clearTimeBefore() {self._timeBefore = nil}

  /// Количество получаемых чатов не больше чем size
  public var size: UInt32 {
    get {return _size ?? 0}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeBefore: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _size: UInt32? = nil
}

public struct Chat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chatID: String {
    get {return _storage._chatID}
    set {_uniqueStorage()._chatID = newValue}
  }

  public var interlocutorSummary: ProfileSummary {
    get {return _storage._interlocutorSummary ?? ProfileSummary()}
    set {_uniqueStorage()._interlocutorSummary = newValue}
  }
  /// Returns true if `interlocutorSummary` has been explicitly set.
  public var hasInterlocutorSummary: Bool {return _storage._interlocutorSummary != nil}
  /// Clears the value of `interlocutorSummary`. Subsequent reads from it will return its default value.
  public mutating func clearInterlocutorSummary() {_uniqueStorage()._interlocutorSummary = nil}

  /// 100 последних сообщений
  public var messages: [Message] {
    get {return _storage._messages}
    set {_uniqueStorage()._messages = newValue}
  }

  public var unreadMessages: UInt32 {
    get {return _storage._unreadMessages}
    set {_uniqueStorage()._unreadMessages = newValue}
  }

  public var lastUpdate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastUpdate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastUpdate = newValue}
  }
  /// Returns true if `lastUpdate` has been explicitly set.
  public var hasLastUpdate: Bool {return _storage._lastUpdate != nil}
  /// Clears the value of `lastUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdate() {_uniqueStorage()._lastUpdate = nil}

  /// Id услуги, связанной с чатом
  public var serviceID: UInt64 {
    get {return _storage._serviceID ?? 0}
    set {_uniqueStorage()._serviceID = newValue}
  }
  /// Returns true if `serviceID` has been explicitly set.
  public var hasServiceID: Bool {return _storage._serviceID != nil}
  /// Clears the value of `serviceID`. Subsequent reads from it will return its default value.
  public mutating func clearServiceID() {_uniqueStorage()._serviceID = nil}

  public var reviewID: UInt64 {
    get {return _storage._reviewID ?? 0}
    set {_uniqueStorage()._reviewID = newValue}
  }
  /// Returns true if `reviewID` has been explicitly set.
  public var hasReviewID: Bool {return _storage._reviewID != nil}
  /// Clears the value of `reviewID`. Subsequent reads from it will return its default value.
  public mutating func clearReviewID() {_uniqueStorage()._reviewID = nil}

  /// Все объявления, связанные с чатом
  public var lots: [Lot] {
    get {return _storage._lots}
    set {_uniqueStorage()._lots = newValue}
  }

  public var folder: ChatFolder {
    get {return _storage._folder}
    set {_uniqueStorage()._folder = newValue}
  }

  /// Заблокирован ли получатель (тот, кто просматривает информацию о чате)
  public var isBlocked: Bool {
    get {return _storage._isBlocked}
    set {_uniqueStorage()._isBlocked = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProfileSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var imageURL: String = String()

  public var name: String = String()

  public var surname: String = String()

  public var isOnline: Bool = false

  /// 'Был в сети...' Возвращается если is_online == false. Устаревшее, используйте last_online
  public var formattedOnlineStatus: String {
    get {return _formattedOnlineStatus ?? String()}
    set {_formattedOnlineStatus = newValue}
  }
  /// Returns true if `formattedOnlineStatus` has been explicitly set.
  public var hasFormattedOnlineStatus: Bool {return self._formattedOnlineStatus != nil}
  /// Clears the value of `formattedOnlineStatus`. Subsequent reads from it will return its default value.
  public mutating func clearFormattedOnlineStatus() {self._formattedOnlineStatus = nil}

  /// Если пользователь не в сети, когда он последний раз был онлайн
  public var lastOnline: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastOnline ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastOnline = newValue}
  }
  /// Returns true if `lastOnline` has been explicitly set.
  public var hasLastOnline: Bool {return self._lastOnline != nil}
  /// Clears the value of `lastOnline`. Subsequent reads from it will return its default value.
  public mutating func clearLastOnline() {self._lastOnline = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _formattedOnlineStatus: String? = nil
  fileprivate var _lastOnline: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ChatFolder: @unchecked Sendable {}
extension ChatPagination: @unchecked Sendable {}
extension Chat: @unchecked Sendable {}
extension ProfileSummary: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ru.zveron.contract.chat.model"

extension ChatFolder: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "OPEN"),
    2: .same(proto: "IN_PROGRESS"),
    3: .same(proto: "DONE"),
    4: .same(proto: "CANCELLED"),
    5: .same(proto: "ARCHIVE"),
  ]
}

extension ChatPagination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatPagination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_before"),
    2: .same(proto: "size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeBefore) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._size) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeBefore {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ChatPagination, rhs: ChatPagination) -> Bool {
    if lhs._timeBefore != rhs._timeBefore {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Chat"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "interlocutor_summary"),
    3: .same(proto: "messages"),
    4: .standard(proto: "unread_messages"),
    5: .standard(proto: "last_update"),
    6: .standard(proto: "service_id"),
    7: .standard(proto: "review_id"),
    8: .same(proto: "lots"),
    9: .same(proto: "folder"),
    10: .standard(proto: "is_blocked"),
  ]

  fileprivate class _StorageClass {
    var _chatID: String = String()
    var _interlocutorSummary: ProfileSummary? = nil
    var _messages: [Message] = []
    var _unreadMessages: UInt32 = 0
    var _lastUpdate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _serviceID: UInt64? = nil
    var _reviewID: UInt64? = nil
    var _lots: [Lot] = []
    var _folder: ChatFolder = .none
    var _isBlocked: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chatID = source._chatID
      _interlocutorSummary = source._interlocutorSummary
      _messages = source._messages
      _unreadMessages = source._unreadMessages
      _lastUpdate = source._lastUpdate
      _serviceID = source._serviceID
      _reviewID = source._reviewID
      _lots = source._lots
      _folder = source._folder
      _isBlocked = source._isBlocked
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._chatID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._interlocutorSummary) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._messages) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._unreadMessages) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._lastUpdate) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._serviceID) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._reviewID) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._lots) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._folder) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._isBlocked) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._chatID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chatID, fieldNumber: 1)
      }
      try { if let v = _storage._interlocutorSummary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._messages, fieldNumber: 3)
      }
      if _storage._unreadMessages != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._unreadMessages, fieldNumber: 4)
      }
      try { if let v = _storage._lastUpdate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._serviceID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._reviewID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      } }()
      if !_storage._lots.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._lots, fieldNumber: 8)
      }
      if _storage._folder != .none {
        try visitor.visitSingularEnumField(value: _storage._folder, fieldNumber: 9)
      }
      if _storage._isBlocked != false {
        try visitor.visitSingularBoolField(value: _storage._isBlocked, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chat, rhs: Chat) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chatID != rhs_storage._chatID {return false}
        if _storage._interlocutorSummary != rhs_storage._interlocutorSummary {return false}
        if _storage._messages != rhs_storage._messages {return false}
        if _storage._unreadMessages != rhs_storage._unreadMessages {return false}
        if _storage._lastUpdate != rhs_storage._lastUpdate {return false}
        if _storage._serviceID != rhs_storage._serviceID {return false}
        if _storage._reviewID != rhs_storage._reviewID {return false}
        if _storage._lots != rhs_storage._lots {return false}
        if _storage._folder != rhs_storage._folder {return false}
        if _storage._isBlocked != rhs_storage._isBlocked {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProfileSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProfileSummary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "image_url"),
    3: .same(proto: "name"),
    4: .same(proto: "surname"),
    5: .standard(proto: "is_online"),
    6: .standard(proto: "formatted_online_status"),
    7: .standard(proto: "last_online"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.surname) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isOnline) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._formattedOnlineStatus) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._lastOnline) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.surname.isEmpty {
      try visitor.visitSingularStringField(value: self.surname, fieldNumber: 4)
    }
    if self.isOnline != false {
      try visitor.visitSingularBoolField(value: self.isOnline, fieldNumber: 5)
    }
    try { if let v = self._formattedOnlineStatus {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._lastOnline {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProfileSummary, rhs: ProfileSummary) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.name != rhs.name {return false}
    if lhs.surname != rhs.surname {return false}
    if lhs.isOnline != rhs.isOnline {return false}
    if lhs._formattedOnlineStatus != rhs._formattedOnlineStatus {return false}
    if lhs._lastOnline != rhs._lastOnline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
